# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoryModel {
  createdAt: DateTime!
  id: ID!
  lots: [LotModel!]!
  slug: String!
  title: String!
  updatedAt: DateTime!
}

input ChangeLotInfoInput {
  categoryId: String
  city: String
  condition: ConditionType
  country: String
  description: JSON
  expiresAt: DateTime
  firstPrice: Float
  lotId: String!
  returnPeriod: ReturnType
  title: String
  type: LotType
}

input ChangeProfileInfoInput {
  city: String
  country: String
  description: String
  phone: String
  username: String
}

enum ConditionType {
  DEFECTIVE
  NEW
  USED
}

input CreateLotInput {
  categoryId: String!
  city: String!
  condition: ConditionType!
  country: String!
  description: JSON
  expiresAt: DateTime!
  firstPrice: Float!
  returnPeriod: ReturnType!
  title: String!
  type: LotType!
}

input CreateUserInput {
  confirmPassword: String!
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeviceModel {
  browser: String!
  os: String!
  type: String!
}

input FiltersInput {
  categoryIds: [String!]
  city: String
  condition: [ConditionType!]
  country: String
  lotTypes: [LotType!]
  priceRange: PriceRangeInput
  query: String
  skip: Float
  sortBy: SortBy
  sortOrder: SortOrder
  take: Float
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LocationModel {
  city: String!
  country: String!
  latidute: Float!
  longitude: Float!
}

input LoginInput {
  login: String!
  password: String!
}

type LotModel {
  buyNowPrice: Float
  category: CategoryModel!
  categoryId: String!
  city: String!
  condition: ConditionType!
  country: String!
  createdAt: DateTime!
  currentPrice: Float
  description: JSON
  expiresAt: DateTime
  firstPrice: Float
  id: ID!
  isActive: Boolean!
  photos: [String!]!
  returnPeriod: ReturnType!
  subscriptions: [LotSubscriptionModel!]!
  title: String!
  type: LotType!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
  views: Float!
}

type LotSubscriptionModel {
  createdAt: DateTime!
  id: ID!
  lot: LotModel!
  lotId: String!
  user: UserModel!
  userId: String!
}

enum LotType {
  AUCTION
  BUYNOW
  MIXED
}

type Mutation {
  changeLotInfo(data: ChangeLotInfoInput!): Boolean!
  changeProfileAvatar(avatar: Upload!): Boolean!
  changeProfileInfo(data: ChangeProfileInfoInput!): Boolean!
  clearSessionCookie: Boolean!
  createLot(data: CreateLotInput!): Boolean!
  createUser(data: CreateUserInput!): Boolean!
  login(data: LoginInput!): UserModel!
  logout: Boolean!
  placeBid(data: PlaceBidInput!): Boolean!
  removePhotoFromLot(data: RemovePhotoInput!): Boolean!
  removeProfileAvatar: Boolean!
  removeSession(id: String!): Boolean!
  reorderPhotosInLot(data: ReorderPhotosInput!): Boolean!
  subscribeToLot(lotId: String!): Boolean!
  unsubscribeFromLot(lotId: String!): Boolean!
  uploadPhotoToLot(data: UploadPhotoInput!, file: Upload!): Boolean!
  verifyAccount(data: VerificationInput!): UserModel!
}

type NotificationModel {
  createdAt: DateTime!
  description: String!
  id: ID!
  isRead: Boolean!
  title: String!
  type: NotificationType!
  user: UserModel!
  userId: String!
}

enum NotificationType {
  LOT_ENDED
  LOT_ENDING
  LOT_LOST
  LOT_WON
  NEW_BID
  OTHER
  OUTBID
}

input PlaceBidInput {
  amount: Float!
  lotId: String!
}

input PriceRangeInput {
  max: Float
  min: Float
}

type Query {
  findAllCategories: [CategoryModel!]!
  findAllLots(filters: FiltersInput!): [LotModel!]!
  findCurrentSession: SessionModel!
  findLastBid(lotId: String!): Boolean!
  findLotById(id: String!): LotModel!
  findOtherSessionsByUser: [SessionModel!]!
  findProfile: UserModel!
}

input RemovePhotoInput {
  lotId: String!
  photoKey: String!
}

input ReorderPhotosInput {
  lotId: String!
  photoKeys: [String!]!
}

enum ReturnType {
  NON_RETURNABLE
  PERIOD_7D
  PERIOD_14D
  PERIOD_30D
}

type SessionMetadataModel {
  device: DeviceModel!
  ip: String!
  location: LocationModel!
}

type SessionModel {
  createAt: String!
  id: ID!
  metadata: SessionMetadataModel!
  userId: String!
}

enum SortBy {
  BIDS
  CREATED_AT
  EXPIRES_AT
  PRICE
}

enum SortOrder {
  ASC
  DESC
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadPhotoInput {
  lotId: String!
}

type UserModel {
  avatar: String
  city: String
  country: String
  createdAt: DateTime!
  description: String
  email: String!
  id: ID!
  isEmailVerified: Boolean!
  isVerified: Boolean!
  lots: [LotModel!]!
  notifications: [NotificationModel!]!
  password: String!
  phone: String
  subscriptions: [LotSubscriptionModel!]!
  updatedAt: DateTime!
  username: String!
}

input VerificationInput {
  token: String!
}