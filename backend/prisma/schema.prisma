generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(cuid(2))

  email    String @unique
  password String

  username String @unique

  description String?
  avatar      String?
  phone       String?

  country String?
  city    String?

  isVerified Boolean @default(false) @map("is_verified")

  isEmailVerified Boolean @default(false) @map("is_email_verified")

  tokens Token[]
  bids   Bid[]
  lots   Lot[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Bid {
  id Int @id @default(autoincrement())

  amount Decimal @db.Decimal(12, 2)

  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId String @map("lot_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@index([amount])
  @@map("bids")
}

model Lot {
  id String @id @default(cuid(2))

  title       String
  description Json?

  photos String[]

  type LotType

  currentPrice Decimal? @map("current_price") @db.Decimal(12, 2)
  firstPrice   Decimal? @map("first_price") @db.Decimal(12, 2)
  buyNowPrice  Decimal? @map("buy_now_price") @db.Decimal(12, 2)

  expiresIn DateTime? @map("expires-in")

  views Int   @default(0)
  bids  Bid[]

  country String
  city    String

  returnPeriod ReturnType    @map("return_period")
  condition    ConditionType

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("lots")
}

model Category {
  id String @id @default(cuid(2))

  title String
  slug  String @unique

  lots Lot[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Token {
  id String @id @default(cuid(2))

  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires-in")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

enum TokenType {
  EMAIL_VERIFY

  @@map("token_type")
}

enum LotType {
  AUCTION
  BUYNOW
  MIXED

  @@map("lot_type")
}

enum ReturnType {
  NON_RETURNABLE
  PERIOD_30D
  PERIOD_14D
  PERIOD_7D

  @@map("return_type")
}

enum ConditionType {
  NEW
  USED
  DEFECTIVE

  @@map("condition_type")
}
